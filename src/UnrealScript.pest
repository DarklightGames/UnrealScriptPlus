comment_single_line = _{ "//" ~ (!"\n" ~ ANY)* }
comment_multi_line = _{ "/*" ~ (!"*/" ~ (comment_multi_line | "/*" | ANY))* ~ "*/" }

COMMENT = _{ comment_single_line | comment_multi_line }
WS = _{ " " | "\n" | "\t" }

WHITESPACE = _{ "\r" } // This symbol is truly useless, so just ignore it globally

compiler_directive_inner = { (!"\n" ~ ANY)* }
compiler_directive = { ^"#" ~ compiler_directive_inner ~ (("\n") | eoi)}

alpha = @{ 'a'..'z' | 'A'..'Z' }
digit = @{ '0'..'9' }
unqualified_identifier = @{ (alpha | "_") ~ (alpha | digit | "_")* }
unqualified_identifier_list = { unqualified_identifier ~ (WS* ~ "," ~ WS* ~  unqualified_identifier)* }
qualified_identifier = @{ unqualified_identifier ~ "." ~ unqualified_identifier }
identifier = @{ qualified_identifier | unqualified_identifier }

// literals
hex_digits = { ASCII_HEX_DIGIT+ }
decimal_digits = { digit+ }
integer_literal_decimal = @{ decimal_digits }
integer_literal_hexadecimal = { ^"0x" ~ hex_digits }
positive_or_negative = { "-" | "+" }
integer_literal = { positive_or_negative? ~ (integer_literal_hexadecimal | integer_literal_decimal) }

float_literal_decimal = @{ digit+ ~ "." ~ digit* ~ ^"f"? }
float_literal_scientific = @{ digit+ ~ ("." ~ digit*)? ~ ^"e" ~ ("+" | "-")? ~ digit+ ~ ^"f"? }

// has to have *either* the decimal or the E in order to be a float literal!
float_literal = @{ ("-" | "+")? ~ (float_literal_scientific | float_literal_decimal) }
numeric_literal = _{ float_literal | integer_literal }


string_literal_character = @{
    !("\\" | "\"") ~ !("\0" | NEWLINE) ~ ANY
    | "\\" ~ !("\0" | NEWLINE) ~ ANY
}
string_literal_inner = @{ string_literal_character* }
string_literal = { "\"" ~ string_literal_inner ~ "\"" }

name_character = @{ ASCII_ALPHANUMERIC | "_" | " " }
name_inner = @{ name_character* }
name_literal = { "'" ~ name_inner ~ "'"}
single_quoted_string_character = @{ !"'" ~ !NEWLINE ~ ANY }
single_quoted_string_inner = @{ single_quoted_string_character* }
single_quoted_string = { "'" ~ single_quoted_string_inner  ~ "'"}
object_literal = { unqualified_identifier ~ WS* ~ single_quoted_string }
vector_literal = { ^"vect" ~ WS* ~ "(" ~ WS* ~ numeric_literal ~ WS* ~ "," ~ WS* ~ numeric_literal ~ WS* ~ "," ~ WS* ~ numeric_literal ~ WS* ~ ")" }
rotator_literal = { ^"rot" ~ WS* ~ "(" ~ WS* ~ numeric_literal ~ WS* ~ "," ~ WS* ~ numeric_literal ~ WS* ~ "," ~ WS* ~ numeric_literal ~ WS* ~ ")" }
literal = {
    vector_literal |
    rotator_literal |
    numeric_literal |
    string_literal |
    name_literal |
    object_literal
}

class_modifier_type = @{
    ^"abstract" |
    ^"cacheexempt" |
    ^"config" |
    ^"dependson" |
    ^"guid" |
    ^"instanced" |
    ^"parseconfig" |
    ^"perobjectconfig" |
    ^"safereplace" |
    ^"transient" |
    ^"collapsecategories" |
    ^"dontcollapsecategories" |
    ^"editinlinenew" |
    ^"noteditinlinenew" |
    ^"hidecategories"|
    ^"showcategories"|
    ^"hidedropdown" |
    ^"placeable" |
    ^"notplaceable" |
    ^"exportstructs" |
    ^"intrinsic" |
    ^"nativereplication" |
    ^"native" |
    ^"noexport"
}
// TODO: WITHIN rule!
class_modifier = { class_modifier_type ~ (WS* ~ "(" ~ WS* ~ expression_list ~ WS* ~ ")")? }
class_within = { ^"within" ~ WS+ ~ identifier }
class_declaration = { ^"class" ~ WS+ ~ unqualified_identifier ~ (WS+ ~ extends)? ~ (WS+ ~ class_within)? ~ (WS+ ~ class_modifier)* ~ WS* ~ ";" }

var_modifier = {
    ^"const" |
    ^"deprecated" |
    ^"private" |
    ^"protected" |
    ^"public" |
    ^"automated" |
    ^"config" |
    ^"globalconfig" |
    ^"input" |
    ^"localized" |
    ^"transient" |
    ^"travel" |
    ^"edfindable" |
    ^"editconstarray" |
    ^"editconst" |
    ^"editinlinenotify" |
    ^"editinlineuse" |
    ^"editinline" |
    ^"cache" |
    ^"export" |
    ^"native" |
    ^"noexport"
}
var_size = { "[" ~ WS* ~ (integer_literal | unqualified_identifier) ~ WS* ~ "]" }
var_name = { unqualified_identifier ~ WS* ~ var_size? }
var_category = { "(" ~ WS* ~ unqualified_identifier? ~ WS* ~ ")" }
var_modifiers = _{ (var_modifier ~ WS+)* }
var_declaration = { ^"var" ~ (WS* ~ var_category)? ~ (WS+ ~ var_modifiers)? ~ WS* ~ type_ ~ WS+ ~ var_names ~ ";" }
struct_var_editable = { "(" ~ WS* ~ ")" }
struct_var_declaration = { ^"var" ~ (WS* ~ struct_var_editable)? ~ (WS+ ~ var_modifier)* ~ WS+ ~ type_ ~ WS+ ~ var_names ~ WS* ~ ";" }

struct_inner_declaration = _{ struct_var_declaration | cppstruct }
struct_inner_declarations = _{ struct_inner_declaration ~ (WS+ ~ struct_inner_declaration)* }
array_type = { ^"array" ~ WS* ~ "<" ~ WS* ~ type_ ~ WS* ~ ">" }
class_type = { ^"class" ~ WS* ~ "<" ~ WS* ~ identifier ~ WS* ~ ">" }
type_ = { struct_declaration | enum_declaration | array_type | class_type | identifier }

boolean_literal = { ^"true" | ^"false" }    // used only in special cases
const_declaration = { ^"const" ~ WS+ ~ unqualified_identifier ~ WS* ~ "=" ~ WS* ~ (literal | boolean_literal) ~ WS* ~ ";" }
enum_declaration = { ^"enum" ~ WS+ ~ unqualified_identifier ~ WS* ~ "{" ~ WS* ~ unqualified_identifier_list ~ WS* ~ ","? ~ WS* ~ "}"}
enum_statement = { enum_declaration ~ ";" }

struct_modifier = {
    ^"long" |
    ^"transient" |
    ^"export" |
    ^"init" |
    ^"native"
}
struct_modifiers = { struct_modifier* }
extends = { ^"extends" ~ WS+ ~ identifier }
struct_declaration = { ^"struct" ~ (WS+ ~ struct_modifier)* ~ WS+ ~ unqualified_identifier ~ WS+ ~ extends? ~ WS* ~ "{" ~ WS* ~ struct_inner_declarations? ~ WS* ~ "}" }

// TODO: syntactically enforce argument rules (only native takes an argument)
function_modifier_type = {
    ^"native" |
    ^"private" |
    ^"protected" |
    ^"public" |
    ^"static" |
    ^"final" |
    ^"exec" |
    ^"simulated" |
    ^"singular" |
    ^"intrinsic" |
    ^"iterator" |
    ^"latent"
}
function_modifier = { function_modifier_type ~ (WS* ~ "(" ~ WS* ~ integer_literal ~ WS* ~ ")")? }
function_modifiers = _{ function_modifier ~ (WS+ ~ function_modifier)* }
function_argument_modifier = {
    ^"coerce" |
    ^"optional" |
    ^"out" |
    ^"skip"
}
function_argument_modifiers = _{ function_argument_modifier ~ (WS+ ~ function_argument_modifier)* }
function_argument = { (function_argument_modifiers ~ WS+)? ~ type_ ~ WS+ ~ var_name}
function_arguments = _{ function_argument ~ (WS* ~ "," ~ WS* ~ function_argument)* }
operator = { ^"operator" ~  WS* ~ "(" ~ WS* ~ integer_literal ~ WS* ~ ")" }
function_type_without_argument = { ^"function" | ^"event" | ^"delegate" | ^"preoperator" | ^"postoperator" }
function_type = { function_type_without_argument | operator }
function_types = _{ function_type ~ (WS+ ~ function_type)* }
function_name = { unqualified_identifier | symbolic_verb }
function_declaration = {
	(function_modifiers ~ WS+)? ~ function_types ~
    ((WS+ ~ (function_modifier ~ WS+)*) | WS+) ~    // this odd line needs to compensate for necessary trailing whitespace on function modifiers, otherwise it can match against a type name of "StaticMesh", for example
    ((type_ ~ WS+ ~ function_name) | function_name) ~ WS* ~
    "(" ~ WS* ~ function_arguments? ~ WS* ~ ")" ~ WS* ~
    function_body_or_semicolon
}

reliability = { ^"reliable" | ^"unreliable" }
replication_statement = { reliability ~ WS+ ~ ^"if" ~ WS* ~ "(" ~ WS* ~ expression_outer ~ WS* ~ ")" ~ WS* ~ unqualified_identifier_list? ~ WS* ~ ";" }
replication_statements = _{ replication_statement ~ (WS* ~ replication_statement)* }
replication_block = { ^"replication" ~ WS* ~ "{" ~ WS* ~ replication_statements? ~ WS* ~ "}" }

type_declaration_statement = _{ (enum_declaration | struct_declaration) ~ ";" }
class_statement = _{ ";" | compiler_directive | const_declaration | var_declaration  | type_declaration_statement | function_declaration | replication_block | state_declaration | defaultproperties | cpptext }
class_statement_pre = { compiler_directive | const_declaration }
class_statement_pres = _{ class_statement_pre ~ (WS* ~ class_statement_pre)* }
class_statements = _{ class_statement ~ (WS* ~ class_statement)* }
eoi = _{ EOI }
program = { SOI ~ WS* ~ class_statement_pres? ~ WS* ~ class_declaration ~ WS* ~ class_statements? ~ WS* ~ eoi }

var_names = _{ var_name ~ (WS* ~ "," ~ WS* ~ var_name)* }
local_declaration = { ^"local" ~ WS+ ~ type_ ~ WS+ ~ var_names ~ WS* ~ ";" }

// LOGIC
// build a straight LIST of what we see in front of us, we will shuffle the AST around in a separate pass!
array_access = { "[" ~ WS* ~ expression_outer ~ WS* ~ "]" }
member_access = { "." ~ WS* ~ unqualified_identifier }
default_access = { ^"default" ~ WS* ~ "." ~ WS* ~ unqualified_identifier }
static_access = { ^"static" ~ WS* ~ "." ~ WS* ~ unqualified_identifier }
default_call = { ^"default" ~ WS* ~ "." ~ WS* ~ unqualified_identifier ~ WS* ~ "(" ~ WS* ~ expression_list ~ WS* ~ ")" }
global_call = { ^"global" ~ WS* ~ "." ~ WS* ~ unqualified_identifier ~ WS* ~ "(" ~ WS* ~ expression_list ~ WS* ~ ")" }
super_call = { ^"super" ~ WS* ~ ("(" ~ WS* ~ unqualified_identifier ~ WS* ~ ")")? ~ WS* ~ "." ~ WS* ~ unqualified_identifier ~ WS* ~ "(" ~ WS* ~ expression_list ~ WS* ~ ")" }
call = { "(" ~ WS* ~ expression_list ~ WS* ~ ")" }
any_call = _{ default_call | super_call | global_call | call }

dyadic_expression = _{ dyadic_verb ~ WS* ~ expression }

symbolic_verb = {
    "++" | "--" | "**" | "+=" | "-=" | "*=" | "/=" | "&&" | "^^" |
    "||" | "-=" | "<<" | ">>>" | ">>" | "<=" | ">=" | "==" | "~=" | "<" | ">" | "!=" |
    "$=" | "@=" | "$" | "@" | "+" | "-" | "=" | "&" | "|" | "^" | "%" | "*" | "/" | "!" | "~"
}

monadic_pre_verb = { "++" | "--" | "~" | "-" | "!" }
monadic_post_verb = { "++" | "--" }

atom = _{ call | array_access | ("." ~ default_access) | ("." ~ static_access) | member_access | (monadic_post_verb? ~ WS* ~ dyadic_expression) }
primary = _{ cast | literal | default_access | static_access | global_call | unqualified_identifier | parenthetical_expression }
target = _{ monadic_pre_verb? ~ WS* ~ (new | primary ~ (WS* ~ atom)*) ~ WS* ~ monadic_post_verb? }

parenthetical_expression = { "(" ~ WS* ~ expression_outer ~ WS* ~ ")" }
expression = _{ target | unqualified_identifier }   // TODO: monadic expression should be a target???

// new is a kind of "terminal", nothing can come after it in an expression
new = { ^"new" ~ (WS* ~ "(" ~ expression_list ~ ")")? ~ WS+ ~ expression } /// fuck this syntax

expression_empty = { "," }
expression_list = _{ (expression_outer ~ WS* ~ "," ~ WS* | (expression_empty ~ WS*))* ~ expression_outer? }
constant_list = _{ (constant ~ "," | expression_empty)* ~ constant? }
cast = { class_type ~ WS* ~ "(" ~ WS* ~ expression_outer ~ WS* ~ ")" }
// NOTE: certain casts (int, string) don't follow the cast grammar, this is only for explicit

code_scope = { "{" ~ WS* ~ code_statements? ~ WS* ~ "}" }
function_body_or_semicolon = _{ ";" | ("{" ~ WS* ~ function_body ~ WS* ~ "}") }
const_declarations = _{ const_declaration ~ (WS* ~ const_declaration)* }
function_body = { const_declarations? ~ WS* ~ local_declarations? ~ WS* ~ code_statements? }
local_declarations = _{ local_declaration ~ (WS* ~ local_declaration)* }
code_statements = _{ code_statement ~ (WS* ~ code_statement)* }
code_statement_outer = { code_statement }
statement_or_block = _{ code_statement_outer | code_scope }

while_statement = { ^"while" ~ WS* ~ "(" ~ WS* ~ expression_outer ~ WS* ~ ")" ~ WS* ~ statement_or_block }
return_statement = { ^"return" ~ (WS+ ~ expression_outer)? ~ WS* ~ ";" }
constant = _{ literal | unqualified_identifier }
// For some reason unbeknownst to mere mortals, UnrealScript allows two default cases in switch statements.

// CONTROL FLOW
jump_label = { unqualified_identifier ~ WS* ~ ":" }
if_statement_empty = { ^"if" ~ WS* ~ "(" ~ WS* ~ expression_outer ~ WS* ~ ")" }
if_statement = { ^"if" ~ WS* ~ "(" ~ WS* ~ expression_outer ~ WS* ~ ")" ~ WS* ~ statement_or_block }
elif_statement = { ^"else" ~ WS+ ~ ^"if" ~ WS* ~ "(" ~ WS* ~ expression_outer ~ WS* ~ ")" ~ WS* ~ statement_or_block }
elif_statements = _{ elif_statement ~ (WS* ~ elif_statement)* }
else_statement = { ^"else" ~ WS* ~ statement_or_block }
conditional_statement = { (if_statement ~ WS* ~ elif_statements? ~ WS* ~ else_statement?) | if_statement_empty }
expression_outer = { expression }

statement_empty = _{ ";" }
statement_empty_outer = { statement_empty }
for_init = { expression_outer }
for_predicate = { expression_outer }
for_post = { expression_outer }
for_statement_inner = { for_init? ~ WS* ~ ";" ~ WS* ~ for_predicate? ~ WS* ~ ";" ~ WS* ~ for_post? }
for_statement = { ^"for" ~ WS* ~ "(" ~ WS* ~ for_statement_inner ~ WS* ~ ")" ~ WS* ~ statement_or_block }

do_until_statement = { ^"do" ~ WS* ~ code_scope ~ (WS* ~ ^"until" ~ WS* ~ "(" ~ WS* ~ expression_outer ~ WS* ~ ")")? }

foreach_expression_atom = _{ array_access | ("." ~ default_access) | ("." ~ static_access) | member_access | call }
foreach_expression = { primary ~ WS* ~ (foreach_expression_atom ~ WS*)* }
foreach_statement = { ^"foreach" ~ WS+ ~ foreach_expression ~ WS* ~ statement_or_block }
switch_statement = { ^"switch" ~ WS* ~ "(" ~ WS* ~ expression_outer ~ WS* ~ ")" ~ WS* ~ "{" ~ (WS* ~ switch_case)* ~ WS* ~ switch_default_case? ~ WS* ~ "}" }
switch_case_label = _{ ^"case" ~ WS+ ~ target ~ WS* ~ ":" }
switch_default_label = _{ ^"default" ~ WS* ~ ":" }
switch_case = { switch_case_label ~ WS* ~ code_statements? }
switch_default_case = { switch_default_label ~ WS* ~ code_statements? }
continue_statement = { ^"continue" ~ WS* ~ ";" }
break_statement = { ^"break" ~ WS* ~ ";" }
goto_statement = { ^"goto" ~ WS+ ~ unqualified_identifier ~ WS* ~ ";" }

// STATES
state_modifier = { ^"auto" | ^"simulated" }
state_modifiers = _{ state_modifier ~ (WS+ ~ state_modifier)* }
state_statement = { const_declaration | function_declaration }
state_statements = _{ state_statement ~ (WS* ~ state_statement)* }
state_editable = { "(" ~ WS* ~ ")" }
state_declaration_body = _{ state_ignores? ~ WS* ~ state_statements? ~ WS* ~ state_labels? }
state_declaration = { (state_modifiers ~ WS+)? ~ ^"state" ~ (WS* ~ state_editable)? ~ WS+ ~ unqualified_identifier ~ (WS+ ~ extends)? ~ WS* ~ "{" ~ WS* ~ state_declaration_body ~  WS* ~ "}" }
state_labels = _{ state_label ~ (WS* ~ state_label)* }
state_label = { unqualified_identifier ~ WS* ~ ":" ~ WS* ~ code_statements? }
state_ignores = { ^"ignores" ~ WS+ ~ unqualified_identifier_list ~ WS* ~ ";" }

// STATES
code_statement = _{ jump_label | conditional_statement | foreach_statement | for_statement | while_statement | do_until_statement | return_statement | break_statement | continue_statement | goto_statement | compiler_directive | switch_statement | const_declaration | (expression_outer ~ WS* ~ ";") | statement_empty }
// TODO: operator precedence is handled at the parser level
dyadic_verb_native = {
    "&&" | "^^" |
    "**" |
    "+=" | "-=" | "*=" | "/=" |
    "*" | "/" |
    "||" |
    "%" |
    "-=" |
    "<<" | ">>>" | ">>" |
    "<=" | ">=" | "==" | "~=" | "<" | ">" |
    "!=" |
    "&" | "|" | "^" |
    "$=" | "@=" |
    "$" | "@" |
    "+" | "-" |
    "="
}
dyadic_verb = { dyadic_verb_native | unqualified_identifier }

// DEFAULTPROPERTIES
LWS = _{ " " | "\t" }
defaultproperties_opening_bracket = _{ "(" | "[" }
defaultproperties_closing_bracket = _{ ")" | "]" }
defaultproperties_value = { literal | identifier | defaultproperties_struct | defaultproperties_array }
defaultproperties_assignment = { defaultproperties_target ~ LWS* ~ "=" ~ LWS* ~ defaultproperties_value? ~ (LWS* ~ ";")* }
defaultproperties_struct = { ("(" | "[") ~ LWS* ~ (defaultproperties_assignment ~ LWS* ~ ("," ~ LWS* ~ defaultproperties_assignment)*)? ~ LWS* ~ (")" | "]") }
defaultproperties_array_comma = { "," }
defaultproperties_array = {
    defaultproperties_opening_bracket ~ LWS* ~
    ((defaultproperties_array_comma | defaultproperties_value) ~ LWS*)* ~
    LWS* ~ defaultproperties_closing_bracket
}
defaultproperties_object = { ^"begin" ~ LWS+ ~ ^"object" ~ LWS+ ~ ^"class" ~ "=" ~ identifier ~ (WS+ ~ (defaultproperties_assignment | defaultproperties_object))* ~ WS+ ~ ^"end" ~ LWS+ ~ ^"object" }
defaultproperties_line = _{ defaultproperties_assignment | defaultproperties_object }
defaultproperties_lines = _{ defaultproperties_line ~ (WS* ~ defaultproperties_line)* }
defaultproperties_target = { unqualified_identifier ~ LWS* ~ (defaultproperties_opening_bracket ~ LWS* ~ (integer_literal | unqualified_identifier) ~ LWS* ~ defaultproperties_closing_bracket)? }
defaultproperties = { ^"defaultproperties" ~ WS* ~ "{" ~ WS* ~ defaultproperties_lines? ~ WS* ~ "}" }

// CPPTEXT
cpp_brackets = _{ "{" ~ WS* ~ cpp_body ~ WS* ~ "}" }
cpp_item = _{ cpp_brackets | (!"{" ~ !"}" ~ ANY) }
cpp_body = _{ cpp_item* }
cpp_body_outer = { cpp_body }
cpptext = { ^"cpptext" ~ WS* ~ "{" ~ cpp_body_outer ~ "}" }
cppstruct = { ^"cppstruct" ~ WS* ~ "{" ~ cpp_body_outer ~ "}" }
